Prob:https://leetcode.com/problems/sum-of-square-numbers/

Since the search space of two numbers is sorted hence both binary search and two pointers can be used here.

Method 1 - Two Pointer Algo:
____________________________________________________________________________________________________________________________
class Solution:
    def judgeSquareSum(self, num: int) -> bool:
        import math
        i = 0
        j = int(math.sqrt(num))   # i^2 + j^2 = num --> when i = 0 then j^2 = num ----> j = sqrt(num)
                                  # that's why j is sqrt(num)

        while i <= j:
            s = i**2 + j**2

            if s == num:
                return True
                break

            if s > num:
                j -= 1

            if s < num:
                i += 1
        return False
        
  __________________________________________________________________________________________________________________________________
  
  Method - Binary Search
  
  class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        
        def binary_search(start,end,k):
            while start <= end:
                mid = start + (end-start)//2
                
                if mid**2 == k:
                    return True
                elif mid**2 > k:
                    end = mid-1
                else:
                    start = mid+1
            return False
                
        
      
      
        import math
        boom = int(math.sqrt(c))
        for a in range(boom+1):
            b = c - a**2
            if binary_search(0,b,b):
                return True
                
        return False
        
        
        
