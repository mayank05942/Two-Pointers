URL: https://medium.com/outco/how-to-solve-sliding-window-problems-28d67601a66


Q- Find the Max Consecutive Sum of following subarray:

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

________________________________________________________________________________________________________________________________

Approach 1 - Kadane's Algo (DP) with O(n) solution:
-----------------------------------------------------

Explanation: Break array into subarrays:

Ex: arr = [-2,3,4,-1,-2,1,5,-3]

Consider a subarray till -1:

All possible subarrays till that points are:      -1             = -1
                                                 4 -1            = 3
                                               3   4  -1         = 6                ----> max(-1,3,6,4) = 6 hence 6 is the max subarray
                                            -2    3    4  -1     = 4                      sum for subarray [-2,3,4,-1]


Consider a subarray till -2:

                                                 -2     = -2
                                             -1  -2     =  -3
                                          4  -1  -2      = 1                  Now it is clear that this subarray depends upon pre
                                       3  4  -1  -2       = 4                 look at sum we have to choose the max among
                                       3  4  -1   -2     = 2                  arr[i] and prev_sum + arr[i]
                                                                              
                                                                              if prev_max_sum = 6 hence we have to choose between
    Note: Base case here will be 1st element of array                         arr[i] and 6 + arr[i] --->   [-2 and 6-2]
                                                                              Note: this will not give me max subarray sum for entire
                                                                              array it will only give max sum for that particular array
                                                                              
                                                                              Hence we need to compare this local_sum with our global_sum
                                                                              if this is greater than our global sum then we will update it.
                                                                              else move ahead with differnt subarray
                                                                              
                                                                              
________________________________________________________________________________________________________________________________________________
Code:

arr =[-2,-3,4,-1,-2,1,5,-3]

global_max = arr[0]
local_max = arr[0]

for i in range(1,len(arr)):
    local_max = max(local_max+arr[i],arr[i])
    global_max = max(global_max,local_max)

print(global_max)
___________________________________________________________________________________________________________________________________________

Approach 2 - Sliding Window:

class Solution:
    def maxSubArray(self, arr: List[int]) -> int:
        if len(arr) == 1:
            return arr[0]
        from sys import maxsize
        global_sum = 0
        for i in range(len(arr)):

            j = i
            local_sum = 0
            while j < len(arr):  # i defines start point of window and j defines the end point of window
                local_sum += arr[j]
                if local_sum < 0:
                    break
                else:
                    j += 1
                    global_sum = max(local_sum,global_sum)
                    
        if global_sum == 0:  # Handle the case when all numbers are neagtive
            return max(arr)
        else:
            return global_sum
       
