Explanation: These kSum prob can be converted into base 2 Sum prob like:

4Sum = arr[i] + 3Sum -->  = arr[i] + arr[j] + 2Sum
Now 2Sum can be solved via two pointers (left and right)

hence we need to fix i and j here:
So we have to use two for loops for i and j iteration and then a while loop to solve 2 sum prob:

Time complexity == O(n^3)

In General time complexity of kSum prob with two pointers is O(n^(k-1))

____________________________________________________________________________________________________________________________________
Code:

class Solution:
    def fourSum(self, arr: List[int], target: int) -> List[List[int]]:
        if not arr or len(arr) < 4:
            return []
        arr.sort()
        lis = []
        for i in range(len(arr)-3):
            for j in range(i+1,len(arr)-2):
                left = j+1
                right = len(arr)-1

                while left < right:
                    s = arr[i]+arr[j]+arr[left]+arr[right]

                    if s ==  target:
                        lis.append((arr[i],arr[j],arr[left],arr[right]))
                        left = left+1
                        right = right-1

                    if s > target:
                        right = right-1

                    if s < target:
                        left = left+1
        return set(lis)
______________________________________________________________________________________________________________________________________
   
        
